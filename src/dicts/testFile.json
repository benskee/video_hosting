{"App":{"folder":false,"fileType":"css","objectPath":"App","start":"0","lastUpdated":"0","name":"App.css","stamps":{"0":"\"h1 {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n#fifthWallLogo {\\r\\n    height: 40px;\\r\\n    width: 40px;\\r\\n}\\r\\n\\r\\n#gif {\\r\\n    margin-left: \\\"-100px\\\";\\r\\n    margin-top: \\\"100px\\\";\\r\\n}\\r\\n\\r\\n#right-links {\\r\\n    margin-right: 0 \\\"auto\\\";\\r\\n}\\r\\n\""}},"components":{"folder":true,"start":"0","animation":{"folder":true,"start":"0"},"codeTutorial":{"folder":true,"start":"0"},"common":{"folder":true,"start":"0"},"layout":{"folder":true,"start":"0"},"projects":{"folder":true,"start":"0"},"user":{"folder":true,"start":"0"}},"views":{"folder":true,"start":"0"},"api":{"folder":true,"start":"1","auth":{"folder":false,"fileType":"js","objectPath":"api.auth","start":"1","lastUpdated":"1","name":"auth.js","stamps":{"1":"\"const Joi = require('joi-browser');\\r\\nconst bcrypt = require('bcrypt');\\r\\nconst _ = require('lodash');\\r\\nconst User = require('../models/User');\\r\\nconst mongoose = require('mongoose');\\r\\nconst express = require('express');\\r\\nconst router = express.Router();\\r\\n\\r\\nrouter.post('/', async (req, res) => {\\r\\n  const { error } = validate(req.body); \\r\\n  if (error) return res.status(400).send(error.details[0].message);\\r\\n\\r\\n  let user = await User.findOne({ username: req.body.username });\\r\\n  if (!user) return res.status(400).send('Invalid username or password.');\\r\\n\\r\\n  const validPassword = await bcrypt.compare(req.body.password, user.password);\\r\\n  if (!validPassword) return res.status(400).send('Invalid username or password.');\\r\\n\\r\\n  const token = user.generateAuthToken();\\r\\n  res.send(token);\\r\\n});\\r\\n\\r\\nfunction validate(req) {\\r\\n  const schema = {\\r\\n    username: Joi.string().min(3).max(255).required(),\\r\\n    password: Joi.string().min(3).max(255).required()\\r\\n  };\\r\\n\\r\\n  return Joi.validate(req, schema);\\r\\n}\\r\\n\\r\\nmodule.exports = router; \\r\\n\""}},"file":{"folder":false,"fileType":"js","objectPath":"api.file","start":"1","lastUpdated":"1","name":"file.js","stamps":{"1":"\"const express = require('express');\\r\\nconst router = express.Router();\\r\\nconst File = require('../models/File');\\r\\nconst User = require('../models/User');\\r\\nconst fs = require('fs')\\r\\nconst path = require('path');\\r\\n// const uploadService = require('../src/services/uploadService')\\r\\nconst multer = require('multer');\\r\\nvar cors = require('cors');\\r\\nconst { findByIdAndRemove } = require('../models/File');\\r\\nrouter.use(cors())\\r\\n\\r\\n \\r\\nvar storage = multer.diskStorage({\\r\\n    destination: function (req, file, cb) {\\r\\n        cb(null, 'src/uploads');\\r\\n    },\\r\\n    filename: function (req, file, cb) {\\r\\n        cb(null, \\\"uploadedFile.json\\\");\\r\\n    }\\r\\n})\\r\\n\\r\\nconst upload = multer({ storage: storage }).single(\\\"file\\\");\\r\\n\\r\\nrouter.delete('/delete', function (req, res) {\\r\\n    const directory = './src/uploads';\\r\\n\\r\\n    fs.readdirSync(directory, (err, files) => {\\r\\n        if (err) throw err;\\r\\n        for (const file of files) {\\r\\n            fs.unlink(path.join(directory, file), err => {\\r\\n            if (err) throw err;\\r\\n            });\\r\\n        }\\r\\n    });\\r\\n    return res.status(200).send('success');\\r\\n\\r\\n})\\r\\n\\r\\nrouter.post('/upload', function (req, res) {\\r\\n    upload(req, res, async function (err) {\\r\\n        if (err instanceof multer.MulterError) {\\r\\n            return res.status(500).json(err);\\r\\n        } else if (err) {\\r\\n            return res.status(500).json(err);\\r\\n        }\\r\\n        try {\\r\\n            const userInput = JSON.parse(req.body.userInput)\\r\\n            const fileJSON = require('../src/uploads/uploadedFile.json')\\r\\n            const newFile = new File({\\r\\n                body: fileJSON,\\r\\n                mediaURL: userInput.mediaURL,\\r\\n                username: userInput.username,\\r\\n                projectName: userInput.projectName,\\r\\n                projectType: userInput.projectType,\\r\\n                timeAdjust: parseInt(userInput.timeAdjust)\\r\\n            });\\r\\n            await newFile.save();\\r\\n        } catch (err) {\\r\\n            console.error(err.message);\\r\\n            res.status(500).send('Server Error');\\r\\n        }\\r\\n    })\\r\\n    return res.status(200).send('success');\\r\\n})\\r\\n\\r\\nrouter.get('/:id', async (req, res) => {\\r\\n    try {\\r\\n        const file = await File.findById(req.params.id);\\r\\n        res.status(200).json({\\r\\n            success: true,\\r\\n            file\\r\\n        });\\r\\n    } catch (err) {\\r\\n        console.error(err.message);\\r\\n        res.status(500).send('Server Error');\\r\\n    }\\r\\n})\\r\\n\\r\\nrouter.put('/:id', async function (req, res) {\\r\\n    const file = await File.findByIdAndUpdate(\\r\\n        req.params.id, \\r\\n        {\\r\\n            mediaURL: req.body.mediaURL,\\r\\n            projectName: req.body.projectName,\\r\\n            timeAdjust: req.body.timeAdjust\\r\\n        }\\r\\n)\\r\\n    if (!file)\\r\\n        return res.status(404).send(\\\"The file with the given ID was not found.\\\");\\r\\n\\r\\n    res.send(file);\\r\\n})\\r\\n\\r\\nrouter.delete('/:id', async function (req,res) {\\r\\n    const file = await File.findByIdAndDelete(req.params.id);\\r\\n\\r\\n    if (!file) \\r\\n        return res.status(404).send(\\\"The file with the given ID was not found.\\\")\\r\\n    \\r\\n    res.send(file)\\r\\n})\\r\\n\\r\\nrouter.get('/', async (req, res) => {\\r\\n    try {\\r\\n        const files = await File.find({});\\r\\n        res.status(200).json({\\r\\n            success: true,\\r\\n            files\\r\\n        });\\r\\n    } catch (err) {\\r\\n        console.error(err.message);\\r\\n        res.status(500).send('Server Error');\\r\\n    }\\r\\n})\\r\\n\\r\\nrouter.get('/animation/:id', async (req, res) => {\\r\\n    try {\\r\\n        const file = await File.findById(req.params.id);\\r\\n        res.status(200).json({\\r\\n            success: true,\\r\\n            file\\r\\n        });\\r\\n    } catch (err) {\\r\\n        console.error(err.message);\\r\\n        res.status(500).send('Server Error');\\r\\n    }\\r\\n})\\r\\n\\r\\nmodule.exports = router;\""}},"users":{"folder":false,"fileType":"js","objectPath":"api.users","start":"1","lastUpdated":"1","name":"users.js","stamps":{"1":"\"const express = require('express');\\r\\nconst _ = require('lodash')\\r\\nconst bcrypt = require(\\\"bcrypt\\\");\\r\\nconst router = express.Router();\\r\\nconst User = require('../models/User');\\r\\n\\r\\n\\r\\nrouter.post('/register', async (req, res) => {\\r\\n    const { username, email, password } = req.body\\r\\n    let user = await User.findOne({ email: email });\\r\\n    if (user) return res.status(400).send( {\\r\\n        \\\"type\\\": \\\"email\\\",\\r\\n        \\\"message\\\": \\\"Email already registered.\\\"\\r\\n    });\\r\\n\\r\\n    let user2 = await User.findOne({ username: username });\\r\\n    if (user2) return res.status(400).send( {\\r\\n        \\\"type\\\": \\\"username\\\",\\r\\n        \\\"message\\\": \\\"username already registered.\\\"\\r\\n    });\\r\\n\\r\\n    const newUser = new User({\\r\\n        username: username,\\r\\n        email: email,\\r\\n        password: password\\r\\n    })\\r\\n\\r\\n    const salt = await bcrypt.genSalt(10);\\r\\n    newUser.password = await bcrypt.hash(newUser.password, salt);\\r\\n    await newUser.save()\\r\\n    \\r\\n    const token = newUser.generateAuthToken()\\r\\n  res\\r\\n    .header(\\\"x-auth-token\\\", token)\\r\\n    .header(\\\"access-control-expose-headers\\\", \\\"x-auth-token\\\")\\r\\n    .send(_.pick(user, [\\\"_id\\\", \\\"name\\\", \\\"email\\\"]));\\r\\n})\\r\\n\\r\\nmodule.exports = router;\""}}},"fileSaver":{"folder":false,"fileType":"js","objectPath":"fileSaver","start":"1","lastUpdated":"8","name":"fileSaver.js","stamps":{"1":"\"FILE SAVER 1\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|package|gitignore/\\r\\n// const options = {\\r\\n//     filter: '/setupTests/'\\r\\n// }\\r\\n// const sourceFolder = './src/components/animation'\\r\\n\\r\\nconst fileSaver = (sourceFolder) => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\n// const saveTime = setInterval( fileSaver, 3000, sourceFolder)\\r\\n// console.log(fs.readdirSync(sourceFolder))\\r\\nlet l = fs.readdirSync('./theSavedFiles').length\\r\\nlet destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\nncp(sourceFolder, destFolder, {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }}, function (err) {\\r\\n    if (err) {\\r\\n        return console.error(err)\\r\\n    }\\r\\n    console.log(l)\\r\\n})\"","2":"\"FILE SAVER 2\\r\\n\\r\\nconst fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|package|gitignore/\\r\\n// const options = {\\r\\n//     filter: '/setupTests/'\\r\\n// }\\r\\n// const sourceFolder = './src/components/animation'\\r\\n\\r\\nconst fileSaver = (sourceFolder) => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\n// const saveTime = setInterval( fileSaver, 3000, sourceFolder)\\r\\n// console.log(fs.readdirSync(sourceFolder))\\r\\nlet l = fs.readdirSync('./theSavedFiles').length\\r\\nlet destFolder = `./theSavedFiles/${l}`\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }}\\r\\n\\r\\nncp(sourceFolder, destFolder, options, function (err) {\\r\\n    if (err) {\\r\\n        return console.error(err)\\r\\n    }\\r\\n    console.log(l)\\r\\n})\"","3":"\"FILE SAVER 3\\r\\nconst fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|(package\\\\.json)|gitignore/\\r\\n// const options = {\\r\\n//     filter: '/setupTests/'\\r\\n// }\\r\\n// const sourceFolder = './src/components/animation'\\r\\n\\r\\nconst fileSaver = (sourceFolder) => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\n// const saveTime = setInterval( fileSaver, 3000, sourceFolder)\\r\\n// console.log(fs.readdirSync(sourceFolder))\\r\\nlet l = fs.readdirSync('./theSavedFiles').length\\r\\nlet destFolder = `./theSavedFiles/${l}`\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }}\\r\\n\\r\\nncp(sourceFolder, destFolder, options, function (err) {\\r\\n    if (err) {\\r\\n        return console.error(err)\\r\\n    }\\r\\n    console.log(l)\\r\\n})\"","4":"\"FILE SAVER 4\\r\\n\\r\\nconst fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|(package-lock\\\\.json)|gitignore/\\r\\n\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nconst fileSaver = () => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\nconst saveTime = setInterval( fileSaver, 3000)\"","5":"\"const fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|(package-lock\\\\.json)|gitignore/\\r\\n\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nconst fileSaver = () => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\nconst saveTime = setInterval( fileSaver, 3000)\"","7":"\"FILE SAVER 7\\r\\n\\r\\nconst fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|(package-lock\\\\.json)|gitignore/\\r\\n\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nconst fileSaver = () => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\nconst saveTime = setInterval( fileSaver, 3000)\"","8":"\"const fs = require('fs')\\r\\nconst ncp = require('ncp').ncp\\r\\n\\r\\nconst sourceFolder = './'\\r\\nconst skipFolders = /.*dicts|uploads|theSavedFiles|node_modules|config|public/\\r\\nconst skipFiles = /.*setupTests|reportWebVitals|README|todo|(package-lock\\\\.json)|gitignore/\\r\\n\\r\\nlet options = {filter: (source) => {\\r\\n        if (fs.lstatSync(source).isDirectory()) {\\r\\n            // return true;\\r\\n            return source.match(skipFolders) == null;\\r\\n        } else {\\r\\n            return source.match(skipFiles) == null;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nconst fileSaver = () => {\\r\\n        let l = fs.readdirSync('./theSavedFiles').length\\r\\n        let destFolder = `./theSavedFiles/${l}`\\r\\n\\r\\n    ncp(sourceFolder, destFolder, options, function (err) {\\r\\n        if (err) {\\r\\n            return console.error(err)\\r\\n        }\\r\\n        console.log(l)\\r\\n    })\\r\\n}\\r\\n\\r\\nconst saveTime = setInterval( fileSaver, 3000)\""}},"file_converter":{"folder":false,"fileType":"py","objectPath":"file_converter","start":"1","lastUpdated":"1","name":"file_converter.py","stamps":{"1":"\"import os\\r\\nimport json\\r\\n\\r\\ntest = open(\\\"./src/code_files/time_stamp_0/Header.js\\\", \\\"r\\\")\\r\\ntab_dict = {}\\r\\n\\r\\nstamps = os.listdir('src/code_files/')\\r\\n\\r\\nfor s in stamps:\\r\\n    for (root, dirnames, filenames) in os.walk(f'src/code_files/{s}/'):\\r\\n        for file in filenames:\\r\\n            name = file.split('.')[0]\\r\\n            ts = int(s[11:])*3\\r\\n            try:\\r\\n                tab_dict[name]\\r\\n            except:\\r\\n                tab_dict[name] = {\\r\\n                    \\\"title\\\": file,\\r\\n                    \\\"start\\\": ts\\r\\n                }\\r\\n            f = open(f'src/code_files/{s}/{file}', \\\"r\\\")\\r\\n            tab_dict[name][ts] = f.read()\\r\\n\\r\\n\\r\\nwith open('./src/tab_dict.json', 'w', encoding='utf-8') as f:\\r\\n    json.dump(tab_dict, f, ensure_ascii=False, indent=4)\\r\\n\""}},"file_saver":{"folder":false,"fileType":"py","objectPath":"file_saver","start":"1","lastUpdated":"5","name":"file_saver.py","stamps":{"1":"\"from shutil import copy as copy\\r\\nimport pathlib\\r\\nimport time\\r\\nimport schedule\\r\\nimport os\\r\\nFILE SAVER 1\\r\\n\\r\\n\\r\\ndef save_files():\\r\\n    pathlib.Path(\\\"./src/code_files\\\").mkdir(exist_ok=True)\\r\\n    t = (len(os.listdir(\\\"./src/code_files\\\")))\\r\\n    dir_name = f\\\"./src/code_files/time_stamp_{t}\\\"\\r\\n    os.mkdir(dir_name)\\r\\n\\r\\n    for (root, dirnames, filenames) in os.walk('src/components/code_tutorial'):\\r\\n        for file in filenames:\\r\\n            copy(f'src/components/code_tutorial/{file}', f\\\"{dir_name}/{file}\\\")\\r\\n\\r\\n\\r\\nschedule.every(3).seconds.do(save_files)\\r\\n\\r\\nwhile True:\\r\\n    schedule.run_pending()\\r\\n    time.sleep(1)\\r\\n\"","2":"\"import os\\r\\nimport schedule\\r\\nimport time\\r\\nimport pathlib\\r\\nfrom shutil import copy as copy\\r\\n\\r\\n\\r\\ndef save_files():\\r\\n    pathlib.Path(\\\"./src/code_files\\\").mkdir(exist_ok=True)\\r\\n    t = (len(os.listdir(\\\"./src/code_files\\\")))\\r\\n    dir_name = f\\\"./src/code_files/time_stamp_{t}\\\"\\r\\n    os.mkdir(dir_name)\\r\\n\\r\\n    for (root, dirnames, filenames) in os.walk('src/components/code_tutorial'):\\r\\n        for file in filenames:\\r\\n            copy(f'src/components/code_tutorial/{file}', f\\\"{dir_name}/{file}\\\")\\r\\n\\r\\n\\r\\nschedule.every(3).seconds.do(save_files)\\r\\n\\r\\nwhile True:\\r\\n    schedule.run_pending()\\r\\n    time.sleep(1)\\r\\n\"","4":"\"# FILE SAVER 4\\r\\nfrom shutil import copy as copy\\r\\nimport pathlib\\r\\nimport time\\r\\nimport schedule\\r\\nimport os\\r\\n\\r\\n\\r\\ndef save_files():\\r\\n    pathlib.Path(\\\"./src/code_files\\\").mkdir(exist_ok=True)\\r\\n    t = (len(os.listdir(\\\"./src/code_files\\\")))\\r\\n    dir_name = f\\\"./src/code_files/time_stamp_{t}\\\"\\r\\n    os.mkdir(dir_name)\\r\\n\\r\\n    for (root, dirnames, filenames) in os.walk('src/components/code_tutorial'):\\r\\n        for file in filenames:\\r\\n            copy(f'src/components/code_tutorial/{file}', f\\\"{dir_name}/{file}\\\")\\r\\n\\r\\n\\r\\nschedule.every(3).seconds.do(save_files)\\r\\n\\r\\nwhile True:\\r\\n    schedule.run_pending()\\r\\n    time.sleep(1)\\r\\n\"","5":"\"import os\\r\\nimport schedule\\r\\nimport time\\r\\nimport pathlib\\r\\nfrom shutil import copy as copy\\r\\n\\r\\n\\r\\ndef save_files():\\r\\n    pathlib.Path(\\\"./src/code_files\\\").mkdir(exist_ok=True)\\r\\n    t = (len(os.listdir(\\\"./src/code_files\\\")))\\r\\n    dir_name = f\\\"./src/code_files/time_stamp_{t}\\\"\\r\\n    os.mkdir(dir_name)\\r\\n\\r\\n    for (root, dirnames, filenames) in os.walk('src/components/code_tutorial'):\\r\\n        for file in filenames:\\r\\n            copy(f'src/components/code_tutorial/{file}', f\\\"{dir_name}/{file}\\\")\\r\\n\\r\\n\\r\\nschedule.every(3).seconds.do(save_files)\\r\\n\\r\\nwhile True:\\r\\n    schedule.run_pending()\\r\\n    time.sleep(1)\\r\\n\""}},"middleware":{"folder":true,"start":"1","auth":{"folder":false,"fileType":"js","objectPath":"middleware.auth","start":"1","lastUpdated":"1","name":"auth.js","stamps":{"1":"\"const jwt = require(\\\"jsonwebtoken\\\");\\r\\n\\r\\nmodule.exports = function(req, res, next) {\\r\\n  const token = req.header(\\\"x-auth-token\\\");\\r\\n  if (!token) return res.status(401).send(\\\"Access denied. No token provided.\\\");\\r\\n\\r\\n  try {\\r\\n    const decoded = jwt.verify(token, config.get(\\\"jwtPrivateKey\\\"));\\r\\n    req.user = decoded;\\r\\n    next();\\r\\n  } catch (ex) {\\r\\n    res.status(400).send(\\\"Invalid token.\\\");\\r\\n  }\\r\\n};\\r\\n\""}}},"models":{"folder":true,"start":"1","File":{"folder":false,"fileType":"js","objectPath":"models.File","start":"1","lastUpdated":"8","name":"File.js","stamps":{"1":"\"const mongoose = require('mongoose');\\r\\n\\r\\nconst FileSchema = new mongoose.Schema({\\r\\n    username: {\\r\\n        type: String,\\r\\n        required: true\\r\\n    },\\r\\n    mediaURL: {\\r\\n        type: String,\\r\\n        required: true\\r\\n    },\\r\\n    projectName: {\\r\\n        type: String,\\r\\n        unique: true,\\r\\n        required: true\\r\\n    },\\r\\n    projectType: {\\r\\n        type: String,\\r\\n        required: true\\r\\n    },\\r\\n    timeAdjust: {\\r\\n        type: Number,\\r\\n        required: true\\r\\n    },\\r\\n    body: {\\r\\n        type: Object,\\r\\n        required: false\\r\\n    }\\r\\n});\\r\\n\\r\\nmodule.exports = File = mongoose.model('file', FileSchema);\"","8":"\"\""}},"User":{"folder":false,"fileType":"js","objectPath":"models.User","start":"1","lastUpdated":"1","name":"User.js","stamps":{"1":"\"const mongoose = require('mongoose')\\r\\nconst config = require(\\\"config\\\");\\r\\nconst jwt = require(\\\"jsonwebtoken\\\");\\r\\n\\r\\nconst UserSchema = new mongoose.Schema({\\r\\n    username: {\\r\\n        type: String,\\r\\n        required: true,\\r\\n        minlength: 3,\\r\\n        maxlength: 50,\\r\\n        unique: true\\r\\n    },\\r\\n    email: {\\r\\n        type: String,\\r\\n        required: true,\\r\\n        minlength: 5,\\r\\n        maxlength: 255,\\r\\n        unique: true\\r\\n    },\\r\\n    password: {\\r\\n        type: String,\\r\\n        minlength: 3,\\r\\n        maxlength: 255,\\r\\n        required: true\\r\\n    },\\r\\n    isAdmin: Boolean\\r\\n})\\r\\n\\r\\nUserSchema.methods.generateAuthToken = function() {\\r\\n  const token = jwt.sign(\\r\\n    {\\r\\n      _id: this._id,\\r\\n      name: this.username,\\r\\n      email: this.email,\\r\\n      isAdmin: this.isAdmin\\r\\n    },\\r\\n    config.get(\\\"jwtPrivateKey\\\")\\r\\n  );\\r\\n  return token;\\r\\n};\\r\\n\\r\\nmodule.exports = User = mongoose.model('user', UserSchema);\""}}},"server":{"folder":false,"fileType":"js","objectPath":"server","start":"1","lastUpdated":"1","name":"server.js","stamps":{"1":"\"const express = require('express');\\r\\nconst connectDB = require('./config/db');\\r\\nconst app = express();\\r\\nvar cors = require('cors');\\r\\napp.use(cors())\\r\\n\\r\\nconnectDB();\\r\\n\\r\\napp.use(express.json({ extended: false }))\\r\\n\\r\\napp.use('/api/file', require('./api/file'));\\r\\napp.use('/api/users', require('./api/users'));\\r\\napp.use('/api/auth', require('./api/auth'));\\r\\n\\r\\nconst PORT = process.env.PORT || 5000;\\r\\n\\r\\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\""}},"src":{"folder":true,"start":"1","App":{"folder":false,"fileType":"css","objectPath":"src.App","start":"1","lastUpdated":"8","name":"App.css","stamps":{"1":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","2":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","3":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","4":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","5":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","6":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","7":"\"import { render, screen } from '@testing-library/react';\\r\\nimport App from './App';\\r\\n\\r\\ntest('renders learn react link', () => {\\r\\n  render(<App />);\\r\\n  const linkElement = screen.getByText(/learn react/i);\\r\\n  expect(linkElement).toBeInTheDocument();\\r\\n});\\r\\n\"","8":"\"\""}},"config":{"folder":false,"fileType":"json","objectPath":"src.config","start":"1","lastUpdated":"1","name":"config.json","stamps":{"1":"\"{\\r\\n    \\\"apiUrl\\\": \\\"http://localhost:5000/api\\\"\\r\\n}\""}},"index":{"folder":false,"fileType":"js","objectPath":"src.index","start":"1","lastUpdated":"1","name":"index.js","stamps":{"1":"\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\nimport App from './App';\\r\\nimport reportWebVitals from './reportWebVitals';\\r\\nimport { BrowserRouter as Router } from 'react-router-dom';\\r\\n\\r\\nReactDOM.render(\\r\\n  <React.StrictMode>\\r\\n    <Router>\\r\\n      <App />\\r\\n    </Router>\\r\\n  </React.StrictMode>,\\r\\n  document.getElementById('root')\\r\\n);\\r\\n// If you want to start measuring performance in your app, pass a function\\r\\n// to log results (for example: reportWebVitals(console.log))\\r\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\r\\nreportWebVitals();\\r\\n\""}},"services":{"folder":true,"start":"1","authService":{"folder":false,"fileType":"js","objectPath":"src.services.authService","start":"1","lastUpdated":"1","name":"authService.js","stamps":{"1":"\"import jwtDecode from \\\"jwt-decode\\\";\\r\\nimport axios from 'axios';\\r\\nimport { apiUrl } from \\\"../config.json\\\";\\r\\n\\r\\nconst apiEndpoint = apiUrl + \\\"/auth\\\";\\r\\nconst tokenKey = \\\"token\\\";\\r\\n\\r\\nfunction setJwt(jwt) {\\r\\n  axios.defaults.headers.common[\\\"x-auth-token\\\"] = jwt;\\r\\n}\\r\\n\\r\\nsetJwt(getJwt());\\r\\n\\r\\nfunction getJwt() {\\r\\n  return localStorage.getItem(tokenKey);\\r\\n}\\r\\n\\r\\nexport async function login(username, password) {\\r\\n  const { data: jwt } = await axios.post(apiEndpoint, { username, password });\\r\\n  localStorage.setItem(tokenKey, jwt);\\r\\n}\\r\\n\\r\\nexport function loginWithJwt(jwt) {\\r\\n  localStorage.setItem(tokenKey, jwt);\\r\\n}\\r\\n\\r\\nexport function logout() {\\r\\n  localStorage.removeItem(tokenKey);\\r\\n}\\r\\n\\r\\nexport function getCurrentUser() {\\r\\n  try {\\r\\n    const jwt = localStorage.getItem(tokenKey);\\r\\n    return jwtDecode(jwt);\\r\\n  } catch (err) {\\r\\n    return null;\\r\\n  }\\r\\n}\\r\\n\\r\\nconst authService = {\\r\\n  login,\\r\\n  loginWithJwt,\\r\\n  logout,\\r\\n  getCurrentUser\\r\\n};\\r\\n\\r\\nexport default authService\""}},"uploadService":{"folder":false,"fileType":"js","objectPath":"src.services.uploadService","start":"1","lastUpdated":"1","name":"uploadService.js","stamps":{"1":"\"import axios from \\\"axios\\\";\\r\\nimport { apiUrl } from \\\"../config.json\\\";\\r\\n\\r\\nconst apiEndpoint = apiUrl + \\\"/file\\\";\\r\\n\\r\\nexport function upload(data) {\\r\\n    console.log(data)\\r\\n    const fileData = new FormData();\\r\\n    fileData.append('file', data.selectedFile);\\r\\n    const inputData = JSON.stringify(data)\\r\\n    fileData.append('userInput', inputData);\\r\\n    return axios.post(apiEndpoint + '/upload', fileData)\\r\\n}\\r\\n\\r\\nexport function deleteFile() {\\r\\n    return axios.delete(apiEndpoint + '/delete');\\r\\n}\\r\\n    \\r\\nconst uploadService = {\\r\\n    upload,\\r\\n    deleteFile\\r\\n}\\r\\n \\r\\nexport default uploadService\""}},"userService":{"folder":false,"fileType":"js","objectPath":"src.services.userService","start":"1","lastUpdated":"1","name":"userService.js","stamps":{"1":"\"import axios from \\\"axios\\\";\\r\\nimport { apiUrl } from \\\"../config.json\\\";\\r\\n\\r\\nconst apiEndpoint = apiUrl + \\\"/users\\\";\\r\\n\\r\\nexport function register(user) {\\r\\n    return axios.post(apiEndpoint + '/register', user)\\r\\n}\""}}},"views":{"folder":true,"start":"1","Animation":{"folder":false,"fileType":"js","objectPath":"src.views.Animation","start":"1","lastUpdated":"1","name":"Animation.js","stamps":{"1":"\"import React, { Component } from 'react';\\r\\nimport ReactPlayer from 'react-player/youtube';\\r\\nimport Gif from '../components/animation/Gif'\\r\\nimport DOMPurify from \\\"dompurify\\\"\\r\\n\\r\\nexport default class Animation extends Component {\\r\\n    constructor() {\\r\\n        super();\\r\\n        this.state = {\\r\\n            animationData: require('../dicts/animationDict.json'),\\r\\n            playedSeconds: 0\\r\\n        };\\r\\n    }\\r\\n    handleProgress = state => {\\r\\n        this.setState({\\r\\n            playedSeconds: state.playedSeconds\\r\\n        });\\r\\n        \\r\\n        if (!this.state.seeking) {\\r\\n            this.setState(state);\\r\\n        }\\r\\n    }\\r\\n    renderContainer(div) {\\r\\n        if (div === '') return null;\\r\\n\\r\\n        return <div className=\\\"container mw-100 mt-2 border border-dark\\\" dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(div) }} />;\\r\\n    };\\r\\n\\r\\n    render() {\\r\\n        const playedSeconds = this.state.playedSeconds;\\r\\n        const animationData = this.state.animationData;\\r\\n        const currentTime = Math.max.apply(Math, Object.keys(this.state.animationData).filter(function (x) { return x <= playedSeconds; }));\\r\\n        const div1 = animationData[currentTime][\\\"div1\\\"];\\r\\n\\r\\n        return (\\r\\n            <div>\\r\\n                <div className=\\\"container m-2\\\">\\r\\n                    \\r\\n                    <div className=\\\"row\\\">\\r\\n                        <div className=\\\"col-12 row\\\">\\r\\n                            <div className=\\\"container col-8 mt-3 py-2 border border-dark\\\">\\r\\n                                <ReactPlayer url=\\\"https://youtu.be/0ZuHI-VW6oo\\\" width=\\\"100%\\\" onProgress={this.handleProgress} controls />\\r\\n                                {this.renderContainer(div1)}\\r\\n                            </div>\\r\\n                            <Gif currentTime={currentTime} animationData={animationData}/>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\""}},"Chart":{"folder":false,"fileType":"js","objectPath":"src.views.Chart","start":"1","lastUpdated":"1","name":"Chart.js","stamps":{"1":"\"import React, { Component } from 'react';\\r\\nimport ReactPlayer from 'react-player/soundcloud'\\r\\n\\r\\n\\r\\nexport default class Chart extends Component {\\r\\n    constructor() {\\r\\n        super();\\r\\n        this.state = {\\r\\n            chartData: require('../dicts/chartDict.json'),\\r\\n            playedSeconds: 0\\r\\n        };\\r\\n    }\\r\\n    handleProgress = state => {\\r\\n        this.setState({\\r\\n            playedSeconds: state.playedSeconds\\r\\n        });\\r\\n        \\r\\n        if (!this.state.seeking) {\\r\\n            this.setState(state);\\r\\n        }\\r\\n    };\\r\\n    render() {\\r\\n        const playedSeconds = this.state.playedSeconds;\\r\\n        const chartData = this.state.chartData\\r\\n        const currentTime = Math.max.apply(Math, Object.keys(this.state.chartData).filter(function (x) { return x <= playedSeconds; }));\\r\\n        const slide = chartData[currentTime][\\\"slide\\\"]\\r\\n        const link = chartData[currentTime][\\\"link\\\"]\\r\\n        return (\\r\\n            <div className=\\\"container m-2\\\">\\r\\n                <ReactPlayer url=\\\"https://soundcloud.com/ben-skee-378863056/chart-deck\\\" onProgress={this.handleProgress} controls />\\r\\n                <br/>\\r\\n                <a href={link} target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\r\\n                    <div style={{ height: \\\"500px\\\"}}>\\r\\n                        <img src={`./static/chartDeck/${slide}_bitstonker.png`} alt=\\\"\\\" />\\r\\n                    </div>\\r\\n                </a>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\""}},"CodeTutorial":{"folder":false,"fileType":"js","objectPath":"src.views.CodeTutorial","start":"1","lastUpdated":"1","name":"CodeTutorial.js","stamps":{"1":"\"import React, { Component } from 'react'\\r\\nimport ReactPlayer from 'react-player/youtube'\\r\\nimport TextList from '../components/codeTutorial/TextList';\\r\\nimport TabList from '../components/codeTutorial/TabList';\\r\\n\\r\\nexport default class CodeTutorial extends Component {\\r\\n    constructor() {\\r\\n        super();\\r\\n        function range(start, end) {\\r\\n            var len = end - start + 1;\\r\\n            var a = new Array(len);\\r\\n            for (let i = 0; i < len; i++) a[i] = (start + i)*3;\\r\\n            return a;\\r\\n        }\\r\\n        this.state = {\\r\\n            tabData: require('../dicts/codeDict'),\\r\\n            stampList : range(0, 50)\\r\\n        }\\r\\n    }\\r\\n    handleProgress = state => {\\r\\n        this.setState({\\r\\n            playedSeconds: state.playedSeconds\\r\\n        })\\r\\n        if (!this.state.seeking) {\\r\\n            this.setState(state)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        function adjust(sec) {\\r\\n            if (sec === 0) {\\r\\n                return -1;\\r\\n            }\\r\\n            else if (sec < 23) {\\r\\n                return 0;\\r\\n            }\\r\\n            else {\\r\\n                return sec - 22;\\r\\n            }\\r\\n        }\\r\\n        const playedSeconds = adjust(this.state.playedSeconds);\\r\\n        const stampList = this.state.stampList\\r\\n        const currentTime = Math.max.apply(Math, stampList.filter(function (x) { return x <= playedSeconds }));\\r\\n        const vals = Object.keys(this.state.tabData)\\r\\n        return (\\r\\n            <div className=\\\"container m-2\\\">\\r\\n                <div>\\r\\n                    <ReactPlayer url=\\\"https://youtu.be/4RVfZKedCpI\\\" onProgress={this.handleProgress} controls />\\r\\n                </div>\\r\\n                <div>\\r\\n                    <TabList currentTime={currentTime} vals={vals} tabData={this.state.tabData}/>\\r\\n                    <TextList currentTime={currentTime} vals={vals} tabData={this.state.tabData}/>\\r\\n                </div>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\""}},"EditProject":{"folder":false,"fileType":"js","objectPath":"src.views.EditProject","start":"1","lastUpdated":"1","name":"EditProject.js","stamps":{"1":"\"import React from 'react'\\r\\nimport Joi from 'joi-browser';\\r\\nimport axios from 'axios'\\r\\nimport Form from '../components/common/Form';\\r\\n// import projectOptions from '../components/common/ProjectOptions'\\r\\n\\r\\n\\r\\nexport default class EditProject extends Form {\\r\\n    state = {\\r\\n        errors: {},\\r\\n        data: { mediaURL: '', projectName: '', timeAdjust: '' }\\r\\n    };\\r\\n\\r\\n    schema = {\\r\\n        projectName: Joi.string().required().label('Project Name'),\\r\\n        mediaURL: Joi.string().required().label('Media Url'),\\r\\n        timeAdjust: Joi.number().required().label('Time Adjust'),\\r\\n    }\\r\\n    \\r\\n    async componentDidMount() {\\r\\n       const { user } = this.props\\r\\n       const { data } = this.state\\r\\n        if (!user) {\\r\\n           return this.props.history.push(\\\"/login\\\");\\r\\n        }\\r\\n\\r\\n        const project = await axios.get(`http://localhost:5000/api/file/${this.props.match.params.id}`)\\r\\n        const { file } = project.data\\r\\n        if (user.name !== file.username) {\\r\\n            return this.props.history.push(\\\"/projects\\\")\\r\\n        }\\r\\n        const newData = {...data}\\r\\n        for (const attr in newData) { newData[attr] = file[attr]}\\r\\n        this.setState({\\r\\n            data: newData\\r\\n        })\\r\\n    }\\r\\n\\r\\n    handleDelete = async () => {\\r\\n        try {\\r\\n            console.log('here')\\r\\n            await axios.delete(`http://localhost:5000/api/file/${this.props.match.params.id}`)\\r\\n            \\r\\n            this.props.history.push(\\\"/projects\\\");\\r\\n        } catch (err) {\\r\\n            if(err.response && err.response.status === 404) {\\r\\n                alert(\\\"File already deleted.\\\")\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    doSubmit = async () => {\\r\\n        try {\\r\\n            const { data } = this.state;\\r\\n            await axios.put(`http://localhost:5000/api/file/${this.props.match.params.id}`, data)\\r\\n            \\r\\n            this.props.history.push(\\\"/projects\\\");\\r\\n        } catch (err) {\\r\\n            if(err.response && err.response.status === 400) {\\r\\n            const errors = { ...this.state.errors };\\r\\n            const { type, message } = err.response.data\\r\\n            errors[type] = message;\\r\\n            this.setState({ errors })\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n\\r\\n        return (\\r\\n            <div>\\r\\n                <h1 className=\\\"m-3 mb-5\\\">Edit Project</h1>\\r\\n\\r\\n                <div className=\\\"col-6 m-auto\\\">\\r\\n                    <button className=\\\"btn btn-danger mb-4\\\" onClick={() => this.handleDelete()}>Delete</button>\\r\\n                    <form onSubmit={this.handleSubmit}>\\r\\n                        {this.renderInput(\\\"mediaURL\\\", \\\"Media Url\\\")}\\r\\n                        {this.renderInput(\\\"projectName\\\", \\\"Project Name\\\")}\\r\\n                        {this.renderInput(\\\"timeAdjust\\\", \\\"Time Adjust\\\")}\\r\\n                        {this.renderButton(\\\"Submit\\\")}\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\""}},"Home":{"folder":false,"fileType":"js","objectPath":"src.views.Home","start":"1","lastUpdated":"1","name":"Home.js","stamps":{"1":"\"import React, { Component } from 'react';\\r\\nimport { Link } from 'react-router-dom';\\r\\n\\r\\nexport default class Home extends Component {\\r\\n    render() {\\r\\n        return (\\r\\n            <div className=\\\"container m-2\\\">\\r\\n                <h1 style={{ textAlign: 'center' }}>Welcome to Fifth Wall Media<br /><br /></h1>\\r\\n                <div className='row'>\\r\\n                    <div className=\\\"col-md-3 col-sm-6\\\">\\r\\n                        <div className=\\\"container mt-4\\\">\\r\\n                            <Link to='./code' style={{ textDecoration: 'none', color: 'black' }}>\\r\\n                                <h3>Code</h3>\\r\\n                                <img alt=\\\"\\\"  className=\\\"img-fluid pic-1\\\" style={{ height: '150px' }} src={`./static/images/code_image.png`}></img>\\r\\n                            </Link>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div className=\\\"col-md-3 col-sm-6\\\">\\r\\n                        <div className=\\\"container mt-3\\\">\\r\\n                            <Link to='./chart' style={{ textDecoration: 'none', color: 'black' }}>\\r\\n                                <h3>Chart Deck</h3>\\r\\n                                <img alt=\\\"\\\"  className=\\\"img-fluid pic-1\\\" style={{ height: '150px'}} src={`./static/images/chartDeck_image.png`}></img>\\r\\n                            </Link>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div className=\\\"col-md-3 col-sm-6\\\">\\r\\n                        <div className=\\\"container mt-3\\\">\\r\\n                            <Link to='/animation' style={{ textDecoration: 'none', color: 'black' }}>\\r\\n                                <h3>Animation</h3>\\r\\n                                <img alt=\\\"\\\"  className=\\\"img-fluid pic-1\\\" style={{ height: '150px'}} src={`./static/images/animation_image.png`}></img>\\r\\n                            </Link>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\""}},"Login":{"folder":false,"fileType":"js","objectPath":"src.views.Login","start":"1","lastUpdated":"1","name":"Login.js","stamps":{"1":"\"import React from 'react';\\r\\nimport Joi from 'joi-browser';\\r\\nimport Form from '../components/common/Form';\\r\\nimport auth from '../services/authService'\\r\\n\\r\\nexport default class Login extends Form {\\r\\n    state = {\\r\\n        data: {username: \\\"\\\", password: \\\"\\\"},\\r\\n        errors: {}\\r\\n    }\\r\\n\\r\\n    schema = {\\r\\n        username: Joi.string().required().label('username'),\\r\\n        password: Joi.string().min(3).max(15).required(),\\r\\n    }\\r\\n\\r\\n    doSubmit = async () => {\\r\\n        try {\\r\\n            const { data } = this.state\\r\\n            await auth.login(data.username, data.password)\\r\\n            window.location = '/projects'\\r\\n        } catch (err) {\\r\\n            if (err.response && err.response.status === 400) {\\r\\n                const errors = { ...this.state.errors }\\r\\n                errors.username = err.response.data;\\r\\n                this.setState({ errors })\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <h1 className='m-3 mb-5'>Login</h1>\\r\\n                <form onSubmit={this.handleSubmit} className=\\\"col-6 m-auto\\\">\\r\\n                    {this.renderInput(\\\"username\\\", \\\"Username\\\")}\\r\\n                    {this.renderInput(\\\"password\\\", \\\"Password\\\", \\\"password\\\")}\\r\\n                    {this.renderButton('Login')}\\r\\n                </form>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\""}},"ProjectList":{"folder":false,"fileType":"js","objectPath":"src.views.ProjectList","start":"1","lastUpdated":"1","name":"ProjectList.js","stamps":{"1":"\"import React, { Component } from 'react'\\r\\nimport FileDisplay from '../components/projects/FileDisplay';\\r\\n\\r\\nexport default class ProjectList extends Component {\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <h1 className=\\\"m-3 mb-5\\\">Available Projects</h1>\\r\\n                <FileDisplay user={this.props.user}/>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\""}},"Register":{"folder":false,"fileType":"js","objectPath":"src.views.Register","start":"1","lastUpdated":"1","name":"Register.js","stamps":{"1":"\"import React from 'react';\\r\\nimport Joi from 'joi-browser';\\r\\nimport Form from '../components/common/Form';\\r\\nimport { register } from '../services/userService'\\r\\nimport auth from '../services/authService'\\r\\n\\r\\nexport default class Register extends Form {\\r\\n    state = {\\r\\n        data: { username: '', email: '', password: '', confirmPassword: '' },\\r\\n        errors: {},\\r\\n        submitted: false\\r\\n    }\\r\\n\\r\\n    schema = {\\r\\n        username: Joi.string().required().label('Username'),\\r\\n        email: Joi.string().required().email().label('Email'),\\r\\n        password: Joi.string().min(3).max(15).required().label('Password'),\\r\\n        confirmPassword: Joi.string().valid(Joi.ref('password')).required().options({ language: { any: { allowOnly: 'must match password' } } })\\r\\n    }\\r\\n\\r\\n    doSubmit = async () => {\\r\\n        this.setState({ submitted: true })\\r\\n        try {\\r\\n            const response = await register(this.state.data);\\r\\n            auth.loginWithJwt(response.headers[\\\"x-auth-token\\\"])\\r\\n            window.location = '/projects'\\r\\n        } catch (err) {\\r\\n            if(err.response && err.response.status === 400) {\\r\\n            const errors = { ...this.state.errors };\\r\\n            const { type, message } = err.response.data\\r\\n            errors[type] = message;\\r\\n            this.setState({ errors })\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n\\r\\n        return (\\r\\n            <div>\\r\\n                <h1 className='m-3 mb-2'>Register</h1>\\r\\n                <form onSubmit={this.handleSubmit} className=\\\"col-6 m-auto\\\">\\r\\n                    {this.renderInput(\\\"username\\\", \\\"Username\\\")}\\r\\n                    {this.renderInput(\\\"email\\\", \\\"Email\\\")}\\r\\n                    {this.renderInput(\\\"password\\\", \\\"Password\\\", \\\"password\\\")}\\r\\n                    {this.renderConfirmPassword(\\\"confirmPassword\\\", \\\"Confirm Password\\\")}\\r\\n                    {this.renderButton('Register')}\\r\\n                </form>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\""}},"Upload":{"folder":false,"fileType":"js","objectPath":"src.views.Upload","start":"1","lastUpdated":"1","name":"Upload.js","stamps":{"1":"\"import React from 'react'\\r\\nimport Joi from 'joi-browser';\\r\\nimport Form from '../components/common/Form';\\r\\n// import projectOptions from '../components/common/ProjectOptions'\\r\\nimport { upload, deleteFile } from './../services/uploadService';\\r\\n\\r\\nexport default class Upload extends Form {\\r\\n    state = {\\r\\n        errors: {},\\r\\n        data: { username: '', selectedFile: null, mediaURL: '', projectName: '', projectType: 'code', timeAdjust: 0 }\\r\\n    };\\r\\n\\r\\n    schema = {\\r\\n        username: Joi.string().required().label('Username'),\\r\\n        projectName: Joi.string().required().label('Project Name'),\\r\\n        mediaURL: Joi.string().required().label('Media Url'),\\r\\n        projectType: Joi.string().required().label('Project Type'),\\r\\n        timeAdjust: Joi.number().required().label('Time Adjust'),\\r\\n        selectedFile: Joi.object().required().error(() => {\\r\\n            return {message: 'Please select a file to upload.'}})\\r\\n        // projectOptions: Joi.string().required.label('projectOptions')\\r\\n    }\\r\\n    componentDidMount() {\\r\\n       const { user } = this.props\\r\\n        if (!user) {\\r\\n           return this.props.history.push(\\\"/login\\\");\\r\\n        }\\r\\n        const newData = {...this.state.data}\\r\\n        newData.username = user.name\\r\\n        this.setState({\\r\\n            data: newData\\r\\n        });\\r\\n    }\\r\\n\\r\\n    doSubmit = async () => {\\r\\n        try {\\r\\n            const { data } = this.state;\\r\\n            deleteFile()\\r\\n            upload(data)\\r\\n            \\r\\n            this.props.history.push(\\\"/projects\\\");\\r\\n        } catch (err) {\\r\\n            if(err.response && err.response.status === 400) {\\r\\n            const errors = { ...this.state.errors };\\r\\n            const { type, message } = err.response.data\\r\\n            errors[type] = message;\\r\\n            this.setState({ errors })\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n\\r\\n        return (\\r\\n            <div>\\r\\n                <h1 className=\\\"m-3 mb-5\\\">Upload Project</h1>\\r\\n                <form onSubmit={this.handleSubmit} className=\\\"col-6 m-auto\\\">\\r\\n                    {this.renderInput(\\\"mediaURL\\\", \\\"Media Url\\\")}\\r\\n                    {this.renderInput(\\\"projectName\\\", \\\"Project Name\\\")}\\r\\n                    {this.renderInput(\\\"timeAdjust\\\", \\\"Time Adjust\\\")}\\r\\n                    {/* {this.renderSelect(\\\"projectOptions\\\", \\\"Project Options\\\", projectOptions)} */}\\r\\n                    {this.renderFileSelect(this.state.errors.selectedFile)}\\r\\n                    {this.renderButton(\\\"Submit\\\")}\\r\\n                </form>\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\""}}},"components":{"folder":true,"start":"4"}},"package":{"folder":false,"fileType":"json","objectPath":"package","start":"4","lastUpdated":"4","name":"package.json","stamps":{"4":"\"{\\r\\n  \\\"name\\\": \\\"react_boilerplate\\\",\\r\\n  \\\"version\\\": \\\"0.1.0\\\",\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@testing-library/jest-dom\\\": \\\"^5.11.9\\\",\\r\\n    \\\"@testing-library/react\\\": \\\"^11.2.5\\\",\\r\\n    \\\"@testing-library/user-event\\\": \\\"^12.8.3\\\",\\r\\n    \\\"axios\\\": \\\"^0.23.0\\\",\\r\\n    \\\"bcrypt\\\": \\\"^5.0.1\\\",\\r\\n    \\\"config\\\": \\\"^3.3.6\\\",\\r\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\r\\n    \\\"dompurify\\\": \\\"^2.3.1\\\",\\r\\n    \\\"express\\\": \\\"^4.17.1\\\",\\r\\n    \\\"express-validator\\\": \\\"^6.11.1\\\",\\r\\n    \\\"joi-browser\\\": \\\"^13.4.0\\\",\\r\\n    \\\"jsonwebtoken\\\": \\\"^8.5.1\\\",\\r\\n    \\\"jwt-decode\\\": \\\"^3.1.2\\\",\\r\\n    \\\"lodash\\\": \\\"^4.17.21\\\",\\r\\n    \\\"mongoose\\\": \\\"^6.0.11\\\",\\r\\n    \\\"multer\\\": \\\"^1.4.3\\\",\\r\\n    \\\"ncp\\\": \\\"^2.0.0\\\",\\r\\n    \\\"prismjs\\\": \\\"^1.23.0\\\",\\r\\n    \\\"react\\\": \\\"^17.0.1\\\",\\r\\n    \\\"react-dom\\\": \\\"^17.0.1\\\",\\r\\n    \\\"react-player\\\": \\\"^2.9.0\\\",\\r\\n    \\\"react-router-dom\\\": \\\"^5.2.0\\\",\\r\\n    \\\"react-scripts\\\": \\\"4.0.3\\\",\\r\\n    \\\"web-vitals\\\": \\\"^1.1.1\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"server\\\": \\\"nodemon server\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  },\\r\\n  \\\"eslintConfig\\\": {\\r\\n    \\\"extends\\\": [\\r\\n      \\\"react-app\\\",\\r\\n      \\\"react-app/jest\\\"\\r\\n    ]\\r\\n  },\\r\\n  \\\"browserslist\\\": {\\r\\n    \\\"production\\\": [\\r\\n      \\\">0.2%\\\",\\r\\n      \\\"not dead\\\",\\r\\n      \\\"not op_mini all\\\"\\r\\n    ],\\r\\n    \\\"development\\\": [\\r\\n      \\\"last 1 chrome version\\\",\\r\\n      \\\"last 1 firefox version\\\",\\r\\n      \\\"last 1 safari version\\\"\\r\\n    ]\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"babel-plugin-prismjs\\\": \\\"^2.0.1\\\",\\r\\n    \\\"concurrently\\\": \\\"^6.2.0\\\",\\r\\n    \\\"nodemon\\\": \\\"^2.0.7\\\"\\r\\n  }\\r\\n}\\r\\n\""}}}